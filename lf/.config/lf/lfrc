# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set previewer ~/.config/lf/lf_kitty_preview
set cleaner ~/.config/lf/lf_kitty_clean
set autoquit true

# cmds/functions
cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)
        localc $fx
        ;;
	image/vnd.djvu|application/pdf|application/octet-stream|application/postscript)
        setsid -f zathura $fx >/dev/null 2>&1
        ;;
    text/*|application/json|inode/x-empty|application/x-subrip)
        $EDITOR $fx
        ;;
	image/x-xcf)
        setsid -f gimp $f >/dev/null 2>&1
        ;;
	image/svg+xml)
        display -- $f
        ;;
	image/*)
        rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" |
		setsid -f sxiv -aio 2>/dev/null | while read -r file; do
			[ -z "$file" ] && continue
			lf -remote "send select \"$file\""
			lf -remote "send toggle"
		done &
		;;
	audio/*|video/x-ms-asf)
        mpv --audio-display=no $f
        ;;
	video/*|application/vnd.rn-realmedia)
        setsid -f mpv $f -quiet >/dev/null 2>&1
        ;;
	application/pdf|application/vnd.djvu|application/epub*)
        setsid -f zathura $fx >/dev/null 2>&1
        ;;
	application/pgp-encrypted)
        $EDITOR $fx
        ;;
	application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text|application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template|application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint|application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template|application/vnd.oasis.opendocument.formula|application/vnd.oasis.opendocument.database) setsid -f libreoffice $fx >/dev/null 2>&1 ;;
    *)
        for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done
        ;;
    esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "extract?[y/N]"
	read ans
	[ $ans = "y" ] && aunpack $fx
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "üöö File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "üìã File(s) copied." "File(s) copies to $dest."
}}

cmd setbg "$1"

cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"

    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)

    echo "$fs" > "$tmpfile_old"
    echo "$fs" > "$tmpfile_new"
    $EDITOR "$tmpfile_new"

    [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }

    paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done

    rm -f "$tmpfile_old" "$tmpfile_new"
    lf -remote "send $id unselect"
}}

# Bindings
map <c-f> $lf -remote "send $id select \"$(fzf)\""
map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"
map gh
map g top
map D delete
map E extract
map C copyto
map M moveto
map <c-n> push :mkdir<space>
map <c-r> reload
map <c-s> set hidden!
map <enter> shell
map x $$f
map X !$f
map o &mimeopen "$f"
map O $mimeopen --ask "$f"

map <c-–∞> $lf -remote "send $id select \"$(fzf)\""
map –û $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"
map –ø—Ä
map –ø top
map –í delete
map –£ extract
map –° copyto
map –¨ moveto
map <c-—Ç> push :mkdir<space>
map <c-–∫> reload
map <c-—ã> set hidden!
map <enter> shell
map —á $$f
map –ß !$f
map —â &mimeopen "$f"
map –© $mimeopen --ask "$f"

map A :rename; cmd-end # at the very end
map c push A<c-u> # new rename
map I :rename; cmd-home # at the very beginning
map i :rename # before extension
map a :rename; cmd-right # after extension
map B bulkrename
map b $setbg $f

map –§ :rename; cmd-end # at the very end
map —Å push A<c-u> # new rename
map I :rename; cmd-home # at the very beginning
map —à :rename # before extension
map —Ñ :rename; cmd-right # after extension
map –ò bulkrename
map –∏ $setbg $f

map <c-e> down
map <c-y> up
map V push :!nvim<space>

map <c-—É> down
map <c-–Ω> up
map –ú push :!nvim<space>

map W $setsid -f $TERMINAL >/dev/null 2>&1

map –¶ $setsid -f $TERMINAL >/dev/null 2>&1

map Y $printf "%s" "$fx" | wl-copy

map –ù $printf "%s" "$fx" | wl-copy

map –æ down
map –ª up
map —Ä updir
map –¥ open
map –ü bottom
map –Ω copy
map –≤ cut
map –∑ paste

map —è—Ä set hidden!
map —è—Ä set hidden!
map —è–∫ set reverse!
map —è—Ç set info
map —è—ã set info size
map —è–µ set info time
map —è—Ñ set info size:time
map —ã—Ç :set sortby natural; set info
map —ã—ã :set sortby size; set info size
map —ã–µ :set sortby time; set info time
map —ã—Ñ :set sortby atime; set info atime
map —ã—Å :set sortby ctime; set info ctime
map —ã—É :set sortby ext; set info
map –ø—Ä cd ~

# Source Bookmarks
source "~/.config/lf/shortcutrc"
